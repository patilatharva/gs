import { TContext } from '../lib/context';

export const footerTitle = '\n\n\n#### PR Dependency Tree\n\n';
export const footerFooter =
  '\n\nThis tree was auto-generated by [gs](https://github.com/patilatharva/gs)';

export function createPrBodyFooter(context: TContext, branch: string): string {
  const terminalParent = findTerminalParent(context, branch);

  const tree = buildBranchTree({
    context,
    currentBranches: [terminalParent],
    prBranch: branch,
    currentDepth: 0,
  });

  return `${footerTitle}${tree}${footerFooter}`;
}

function buildBranchTree({
  context,
  currentBranches,
  prBranch,
  currentDepth,
}: {
  context: TContext;
  currentBranches: string[];
  prBranch: string;
  currentDepth: number;
}): string {
  let tree = '';

  for (const branch of currentBranches) {
    if (
      branch !== prBranch &&
      !(
        // If we aren't on the last branch,
        // then we should print it if the pr branch is either a parent or child
        // of the current branch being looked at in our recursive algorithm
        (
          isParentOfBranch(context, branch, prBranch) ||
          isParentOfBranch(context, prBranch, branch)
        )
      )
    ) {
      continue;
    }

    const leaf = buildLeaf({
      context,
      branch,
      depth: currentDepth,
      prBranch,
    });

    tree += leaf || '';

    const children = context.engine.getChildren(branch);

    if (children.length) {
      tree += `${buildBranchTree({
        context,
        currentBranches: children,
        prBranch,
        currentDepth: currentDepth + 1,
      })}`;
    }
  }

  return tree;
}

function buildLeaf({
  context,
  branch,
  depth,
  prBranch,
}: {
  context: TContext;
  branch: string;
  depth: number;
  prBranch: string;
}): string | undefined {
  const prInfo = context.engine.getPrInfo(branch);

  const number = prInfo?.number;

  if (!number) {
    return;
  }

  return `\n${'  '.repeat(depth)}* **PR #${number}**${
    branch === prBranch ? ' ðŸ‘ˆ' : ''
  }`;
}

function findTerminalParent(context: TContext, currentBranch: string): string {
  const parent = context.engine.getParent(currentBranch);
  if (!parent) {
    throw new Error('Parent branch is undefined');
  }

  if (context.engine.isTrunk(parent)) {
    return currentBranch;
  }

  return findTerminalParent(context, parent);
}

function isParentOfBranch(
  context: TContext,
  parent: string,
  branch: string
): boolean {
  const children = context.engine.getChildren(parent);

  if (children.includes(branch)) {
    return true;
  }

  for (const child of children) {
    if (isParentOfBranch(context, child, branch)) {
      return true;
    }
  }

  return false;
}
